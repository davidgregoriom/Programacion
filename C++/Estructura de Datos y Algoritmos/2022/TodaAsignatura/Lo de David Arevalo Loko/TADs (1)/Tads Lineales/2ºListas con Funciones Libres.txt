Iterar una lista de elementos e imprimir sus datos
#include <memory>	
#include <iostream>
	
void print_list(std::shared_ptr<Element> lista) {
    std::shared_ptr<Element> iterator = lista;	
    while (iterator != nullptr) {
        std::cout << iterator->dato.name << std::endl;
        iterator = iterator->next;
    }	
}
	
int main() {	
    // Tenemos algunos datos	
    TipoDato t1{"nicol치s"};	
    TipoDato t2{"marina"};	
    TipoDato t3{"humberto"};	
 	
    // Tenemos elementos que almacenan los datos	
    std::shared_ptr<Element> e1 = std::make_shared<Element>(Element{t1});	
    std::shared_ptr<Element> e2 = std::make_shared<Element>(Element{t2});	
    std::shared_ptr<Element> e3 = std::make_shared<Element>(Element{t3});
		
    // Los podemos poner en "orden" (uno detr치s de otro)	
    e1->next = e2;
    e2->next = e3;
 
    // La lista la representamos por el primer elemento
    std::shared_ptr<Element> lista = e1;
    print_list(lista);	
}
******************************************************************************
Ejecutar una acci칩n sobre cada dato de la lista

// Calls 'action' with the data of each element in the list
void for_each(std::shared_ptr<Element> lista,std::function<void (TipoDato&)> action) {
    // Iterate the list as usual
    std::shared_ptr<Element> iterator = lista;
    while (iterator != nullptr) {
        action(iterator->dato); // Call the action
        iterator = iterator->next;
    }
}
***********************************************************************
Ejecutar una acci칩n sobre cada dato de la lista. La funci칩n recibe el dato y la posici칩n en la lista.
// Calls 'action' with the data of each element in the list
void enumerate(std::shared_ptr<Element> lista,std::function<void (int, TipoDato&)> action){
    // Iterate the list as usual
    std::shared_ptr<Element> iterator = lista;
    int idx = 0;
    while (iterator != nullptr) {
        action(idx, iterator->dato); // Call the action
        iterator = iterator->next;
        idx++;
    }
}
***************************************************************************
Tama침o de una lista (iterativo)
int size(std::shared_ptr<Element> lista) {
    int size = 0;
    std::shared_ptr<Element> iterator = lista; // first element
    while (iterator != nullptr) {
        size += 1;
        iterator = iterator->next;
    }
    return size;
}
******************************************************************************
Tama침o de una lista (recursivo)
int size(std::shared_ptr<Element> lista) {
    if (lista == nullptr) {
        return 0;
    }
    return 1 + size(lista->next);
}
*****************************************************************************
Comprobar si una lista est치 vac칤a
bool empty(std::shared_ptr<Element> lista) {
    return (lista == nullptr);
}
***************************************************************************
Comprobar si una lista est치 vac칤a usando otras funciones 游뱂

bool empty(std::shared_ptr<Element> lista) {
    return size(lista) == 0;
}
**************************************************************************
Devuelve el dato almacenado en el primer elemento
// Returns data from the first element in 'lista'
TipoDato& front(std::shared_ptr<Element> lista) {
    return lista->dato;
}
*************************************************************************
Devuelve el dato almacenado en el 칰ltimo elemento de la lista.
// Returns data from the last element in 'lista'
TipoDato& back(std::shared_ptr<Element> lista) {
    std::shared_ptr<Element> iterator = lista;
    while (iterator->next != nullptr) {
        iterator = iterator->next;
    }
    return iterator->dato;
}
**************************************************************************
Acceder al dato en la posici칩n i-칠sima.
// Returns the data from 'lista' at position 'pos'
TipoDato& at(std::shared_ptr<Element> lista, int pos) {
    std::shared_ptr<Element> iterator = lista;
    int idx = 0;
    while (iterator != nullptr) {
        if (idx == pos) {
            break;
        }
        iterator = iterator->next;
        idx++;
    }
    return iterator->dato;
}
**************************************************************************
Inserta un dato al final de la lista.
// Inserts new date at the end
void push_back(std::shared_ptr<Element>& lista,  // Note the reference
               const TipoDato& dato) {
    // Create the element to hold the incoming dato
    std::shared_ptr<Element> elem = std::make_shared<Element>(Element{dato});
    if (empty(lista)) {
        lista = elem;  // Now it is the only element in the list
    }
    else {
        // Traverse the list to the latest element
        std::shared_ptr<Element> iterator = lista;
        while (iterator->next != ) {
            iterator = iterator->next;
        }
        // The new element will become the latest one
        iterator->next = elem;
    }
}
**************************************************************************
Inserta un dato al principio de la lista.
// Inserts element 'elem' as the first element of the list
void push_front(std::shared_ptr<Element>& lista, // Note the reference
                const TipoDato& dato) {
    // Create the element to hold the incoming data
    std::shared_ptr<Element> elem = std::make_shared<Element>(Element{dato});
    if (empty(lista)) {
        lista = elem;  // Now it is the only element in the list
    }
    else {
        elem->next = lista;
        lista = elem;
    }
}
**************************************************************************
Inserta un dato en una posici칩n dada.
// Inserts 'dato' in the position indicated by 'pos'.
void insert(std::shared_ptr<Element>& lista, // Note the reference
            const TipoDato& dato,
            int pos) {
    // Create the element to hold the incoming data
    std::shared_ptr<Element> elem = std::make_shared<Element>(Element{dato});

    if (pos == 0) {
        // Insertion at the beginning is particular
        push_front(lista, dato);
    }
    else {
        // Search the element before the requested position
        std::shared_ptr<Element> iterator = lista;
        int idx = 0;
        while (idx != pos - 1) {
            iterator = iterator->next;
            idx++;
        }
        elem->next = iterator->next;
        iterator->next = elem;
    }
}
***************************************************************************
Elimina el 칰ltimo elemento.
// Removes the last element from the list
void pop_back(std::shared_ptr<Element>& lista) {
    if (lista->next == nullptr) {
        // If the list only has one element
        lista = nullptr;
    }
    else {
        std::shared_ptr<Element> iterator = lista;
        while (iterator->next->next != nullptr) {
            iterator = iterator->next;
        }
        iterator->next = nullptr;
    }
}
*****************************************************************************
Elimina el primer elemento.
// Removes the first element from the list
void pop_front(std::shared_ptr<Element>& lista) {
    lista = lista->next;
}
*****************************************************************************
Elimina todos los elementos.
// Remove all elements from the list
void clear(std::shared_ptr<Element>& lista) {
    lista = nullptr;
}
*****************************************************************************
Elimina el elemento de la posici칩n indicada.
// Remove element at position 'pos'
void erase(std::shared_ptr<Element>& lista, int pos) {
    if (pos == 0) {
        lista = lista->next;
    }
    else {
        // Search the element before the requested position
        std::shared_ptr<Element> iterator = lista;
        int idx = 0;
        while (idx != pos - 1) {
            iterator = iterator->next;
            idx++;
        }
        iterator->next = iterator->next->next;
    }
}
****************************************************************************
Intercambiar dos elementos dados por sus 칤ndices.
// Swap two elements inside the list. Assume pos2 > pos1
void swap(std::shared_ptr<Element>& lista, 
          int pos1, int pos2) {
    auto& dato1 = at(lista, pos1);  // Note the reference
    auto& dato2 = at(lista, pos2);  // Note the reference
    std::swap(dato1, dato2);
}
***************************************************************************
Necesitamos una funci칩n para comparar instancias de TipoDato.
// Function to compare two instances of TipoDato
bool equal(const TipoDato& lhs, const TipoDato& rhs) {
    return lhs.name == rhs.name;
}
***************************************************************************
B칰squeda lineal de un dato (primera ocurrencia).
// Returns the index of the element. If not found, returns -1.
int find(std::shared_ptr<Element> lista, const TipoDato& dato) {
    std::shared_ptr<Element> iterator = lista;
    int found = -1; // If not found, it will return -1
    int idx = 0;
    while (iterator != nullptr) {
        if (equal(iterator->dato, dato)) {  // Use external function to compare
            found = idx;
            break;
        }
        iterator = iterator->next;
        idx++;
    }
    return found;
}
***************************************************************************
Devuelve una lista nueva que contiene un trozo de otra lista.
// Returns the slice taken from the input 'lista' between
// indexes 'begin' and 'end'.
std::shared_ptr<Element> slice(std::shared_ptr<Element> lista,
                               int begin,
                               int end) {
    // Move an iterator to the element at position 'begin'
    std::shared_ptr<Element> iterator = lista;
    int idx = 0;
    while (idx != begin) {
        iterator = iterator->next;
        idx++;
    }
    // We will push_back all elements to a new list
    std::shared_ptr<Element> slice = std::make_shared<Element>(iterator->dato);
    while (idx != end) { // until position 'end'
        iterator = iterator->next;
        idx++;
        push_back(slice, iterator->dato);
    }
    return slice;
}
****************************************************************************
Necesitamos una funci칩n para definir el criterio de ordenaci칩n entre instancias de TipoDato.
// Function to compare two instances of TipoDato
bool less_than(const TipoDato& lhs, const TipoDato& rhs) {
    return lhs.name < rhs.name;
}
****************************************************************************
Hemos implementado todas las funciones que utilizaban los algoritmos de ordenaci칩n
	swap 	at 	slice 	push_back
Bubble sort 	游녨 	游녨 		
Selection sort 	游녨 	游녨 		
Mergesort 		游녨 	游녨 	游녨
Quicksort 	游녨 	游녨 	
***************************************************************************


